from crypto_agama.agama_transform_tools import hex_to_num, num_to_bin, bin_to_hex

# test matrix
my_icon_matrix = [
"11111111111111111111111111111111",
"10000000000000000000000000000001",
"10000000000000000000000000000001",
"10000000000000011100000000000001",
"10000000000001111111000000000001",
"10000000000011111111100000000001",
"10000000000011111111110000000001",
"10000000000111111111110000000001",
"10000000000111111111110000000001",
"10000000000111001001110000000001",
"10000000000111001001110000000001",
"10000000000011101011100001100001",
"10000000000011111111100010010001",
"10000000000001111111100000010001",
"10001100000011111111100000010001",
"10010010000111111111110000100001",
"10010001111111111111111111000001",
"10000000001111111111111100000001",
"10000000011111111111111100000001",
"10000000111111110111111110000001",
"10100001111011110011101111000001",
"11000011100011100011100011100101",
"11000111000011100001100001110011",
"11111110000011100001100000011111",
"10011000100011100001100000001101",
"10000001000011000001110000000001",
"10000001000111000000110000000001",
"10000001111110000000011111100001",
"10000000000000000000000000010001",
"10000000000000000000000000100001",
"00000000000000000000000000000001",
"11111111111111111111111111111111",
]

"""
try:
    for y, row in enumerate(my_icon_matrix):
        for x, value in enumerate(row):
            print(x,y, value)
except:
        print("Err. Matrix")
"""
print("="*32)
print("[my_icon_matrix] data")
str8 = ""
for row in my_icon_matrix:
    str1 = bin_to_hex(str(row),True,8)
    print(row, str1)
    str8 += str1

# ffffffff80000001800000018001c0018007f001800ff801800ffc01801ffc01801ffc01801c9c01801c9c01800eb861800ff8918007f8118c0ff811921ffc2191ffffc1803fff01807fff0180ff7f81a1ef3bc1c38e38e5c70e1873fe0e181f988e180d810c1c01811c0c0181f807e1800000118000002100000001ffffffff
print("-"*32)
print("[str8] hex")
print(str8, len(str8))

print("[part8] reconstruct")
for part in range(32):
   part8 = str8[part*8:(part+1)*8]
   print(part, part8, num_to_bin(hex_to_num(part8),True,4*8))

"""
================================
[my_icon_matrix] data
11111111111111111111111111111111 ffffffff
10000000000000000000000000000001 80000001
10000000000000000000000000000001 80000001
10000000000000011100000000000001 8001c001
10000000000001111111000000000001 8007f001
10000000000011111111100000000001 800ff801
10000000000011111111110000000001 800ffc01
10000000000111111111110000000001 801ffc01
10000000000111111111110000000001 801ffc01
10000000000111001001110000000001 801c9c01
10000000000111001001110000000001 801c9c01
10000000000011101011100001100001 800eb861
10000000000011111111100010010001 800ff891
10000000000001111111100000010001 8007f811
10001100000011111111100000010001 8c0ff811
10010010000111111111110000100001 921ffc21
10010001111111111111111111000001 91ffffc1
10000000001111111111111100000001 803fff01
10000000011111111111111100000001 807fff01
10000000111111110111111110000001 80ff7f81
10100001111011110011101111000001 a1ef3bc1
11000011100011100011100011100101 c38e38e5
11000111000011100001100001110011 c70e1873
11111110000011100001100000011111 fe0e181f
10011000100011100001100000001101 988e180d
10000001000011000001110000000001 810c1c01
10000001000111000000110000000001 811c0c01
10000001111110000000011111100001 81f807e1
10000000000000000000000000010001 80000011
10000000000000000000000000100001 80000021
00000000000000000000000000000001 00000001
11111111111111111111111111111111 ffffffff
--------------------------------
[str8] hex
ffffffff80000001800000018001c0018007f001800ff801800ffc01801ffc01801ffc01801c9c01801c9c01800eb861800ff8918007f8118c0ff811921ffc2191ffffc1803fff01807fff0180ff7f81a1ef3bc1c38e38e5c70e1873fe0e181f988e180d810c1c01811c0c0181f807e1800000118000002100000001ffffffff 256
[part8] reconstruct
 0 ffffffff 11111111111111111111111111111111
 1 80000001 10000000000000000000000000000001
 2 80000001 10000000000000000000000000000001
 3 8001c001 10000000000000011100000000000001
 4 8007f001 10000000000001111111000000000001
 5 800ff801 10000000000011111111100000000001
 6 800ffc01 10000000000011111111110000000001
 7 801ffc01 10000000000111111111110000000001
 8 801ffc01 10000000000111111111110000000001
 9 801c9c01 10000000000111001001110000000001
10 801c9c01 10000000000111001001110000000001
11 800eb861 10000000000011101011100001100001
12 800ff891 10000000000011111111100010010001
13 8007f811 10000000000001111111100000010001
14 8c0ff811 10001100000011111111100000010001
15 921ffc21 10010010000111111111110000100001
16 91ffffc1 10010001111111111111111111000001
17 803fff01 10000000001111111111111100000001
18 807fff01 10000000011111111111111100000001
19 80ff7f81 10000000111111110111111110000001
20 a1ef3bc1 10100001111011110011101111000001
21 c38e38e5 11000011100011100011100011100101
22 c70e1873 11000111000011100001100001110011
23 fe0e181f 11111110000011100001100000011111
24 988e180d 10011000100011100001100000001101
25 810c1c01 10000001000011000001110000000001
26 811c0c01 10000001000111000000110000000001
27 81f807e1 10000001111110000000011111100001
28 80000011 10000000000000000000000000010001
29 80000021 10000000000000000000000000100001
30 00000001 00000000000000000000000000000001
31 ffffffff 11111111111111111111111111111111
"""

"""
===== noise ===========================
4f2c76795aafb17902d7a3d8ff6db6c4158415e4ad996dec1b9d201f4285590a 64
0 4f2c7679 01001111001011000111011001111001
1 5aafb179 01011010101011111011000101111001
2 02d7a3d8 00000010110101111010001111011000
3 ff6db6c4 11111111011011011011011011000100
4 158415e4 00010101100001000001010111100100
5 ad996dec 10101101100110010110110111101100
6 1b9d201f 00011011100111010010000000011111
7 4285590a 01000010100001010101100100001010
"""

print("[file] read")
with open("data_img/octopus.txt", "r") as file:
    lines = file.readlines()
    for line in lines:
        cleaned_line = line.strip()
        str_hex = bin_to_hex(str(cleaned_line),True,8)
        print(cleaned_line, str_hex)
